input {
    jdbc {
        jdbc_driver_library => "${BASE_PATH}/lib/ojdbc6.jar"
        jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
        jdbc_connection_string => "${HP_ORACLE_CONNECTION_STRING}"
        jdbc_user => "${HP_ORACLE_JDBC_USER}"
        jdbc_password => "${hp_password}"
        jdbc_default_timezone => "Asia/Seoul"

        # 증분 Check
        record_last_run => true
        # logstash 구동 시간을 저장
        last_run_metadata_path => "${BASE_PATH}/data/${SOURCE_TYPE}/logstash/lastrun"
        use_column_value => true

        # 색인 추적을 위한 컬럼 추가
        tracking_column => "modify_date"
        tracking_column_type => "timestamp"
        clean_run => "${CLEAN_RUN}"

        # HOME_DB 조회
        # 1. DB에 statement을 실행
        # 2. 결과 값을 output으로 보냄 또는 filter를 통해서 데이터를 추가 가
        statement_filepath => "${BASE_PATH}/config/${SOURCE_TYPE}/main.sql"
        #statement => "
            SELECT
                *
            FROM
                TABLE_NAME
        "
        # 카드이름, 카트혜택, 카트출시일, 카드이미지 URL, ...
        # 결과 값 : 페이지ID(PK), 카드이름, 카트 출시일, 카트혜택(X)
        # 결과 로우 : 1000개

    }
}
filter {
        # CMS_DB 조회
        jdbc_streaming{
                jdbc_driver_library => "${BASE_PATH}/lib/ojdbc6.jar"
                jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
                jdbc_connection_string => "${HP_ORACLE_CONNECTION_STRING}"
                jdbc_user => "${HP_ORACLE_JDBC_USER}"
                jdbc_password => "${hp_password}"
                statement => "
                    SELECT
                        *
                    FROM
                        TABLE_NAME
                    WHERE
                        URL IS NOT NULL
                    AND
                        pageid = :pageid
                "
                # HOME_DB 조회 결과에서 pageid 로 where 절 적용
                parameters => {"pageid" => "pageid"}
                # CMS_DB 조회 결과를 cms_contents = [{0},{1},...,{N}]에 저장
                target => "cms_contents"
                # 페이지ID(PK), 카드이름, 카트 출시일, 카트혜택(X), cms_contents, opendate
        }
        ruby {
                code => "
                        cms_contents = event.get('cms_contents')

                        unless cms_contents.nil?
                            cms_contents.each_index do |index|
                                unless cms_contents[index]['card_note'].nil?
                                    card_note = cms_contents[index]['card_note']
                                    card_note = card_note.gsub(/<\/?[^>]+>/,'')
                                    card_note = card_note.gsub(/[\r\n]+/,' ')
                                    card_note = card_note.gsub(/[[:space]]+/,'')
                                    event.set('card_note', card_note)
                                end

                                for i in 1..15
                                    bn = 'bn'+i.to_s
                                    txt_bn = 'text_bn' + i.to_s
                                    unless cms_contents[index][bn].nil?
                                        bn_value = cms_contents[index][bn]
                                        event.set(bn,bn_value)
                                        bn_value = bn_value.gsub(/<\/?[^>]+>/,'')
                                        bn_value = bn_value.gsub(/[\r\n]+/,' ')
                                        bn_value = bn_value.gsub(/[[:space]]+/,'')
                                        event.set(txt_bn, bn_value)
                                    end
                                end

                                unless cms_contents[index]['brief'].nil?
                                    event.set('brief', cms_contents[index]['brief'])
                                end

                                unless cms_contents[index]['sh_keyword'].nil?
                                    event.set('sh_keyword', cms_contents[index]['sh_keyword'])
                                end

                                unless cms_contents[index]['open_date'].nil?
                                    open_date = cms_contents[index]['open_date']
                                    open_date = open_date.gsub(/[.]/, '')
                                    event.set('open_date', open_date)
                                end
                            end
                        end
                "
        }
        mutate {
            remove_field => ["cms_contents"]
            convert => {
                "open_date" => "integer"
            }
        }

}
output {
    #stdout { codec => rubydebug }

    if [search_yn] == "Y" and [use_yn] == "Y" {
        elasticsearch{
            host => ["${ELASTICSEARCH_HOST}"]
            index => "${ELASTIC_INDEX}"
            document_type => "_doc"
            sniffing => false
            document_id => "%{pageid}"
        }
    } else {
        elasticsearch{
            host => ["${ELASTICSEARCH_HOST}"]
            index => "${ELASTIC_INDEX}"
            document_type => "_doc"
            action => "delete"
            document_id => "%{pageid}"
        }
    }
}


















